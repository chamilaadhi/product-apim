#   Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
################################################################################

swagger: '2.0'
######################################################
# Prolog
######################################################
info:
  version: "v1"
  title: "WSO2 API Manager - Gateway"
  description: |
    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.
    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.7.206/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.
  contact:
    name: "WSO2"
    url: "http://wso2.com/products/api-manager/"
    email: "architecture@wso2.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

######################################################
# The fixed parts of the URLs of the API
######################################################

# The schemes supported by the API
schemes:
  - https

# The domain of the API.
# This is configured by the customer during deployment.
# The given host is just an example.
host: apis.wso2.com

# The base path of the API.
# Will be prefixed to all paths.
basePath: /api/am/gateway/v1

# The following media types can be passed as input in message bodies of the API.
# The actual media type must be specified in the Content-Type header field of the request.
# The default is json, i.e. the Content-Type header is not needed to
# be set, but supporting it serves extensibility.
consumes:
  - application/json

# The following media types may be passed as output in message bodies of the API.
# The media type(s) consumable by the requestor is specified in the Accept header field
# of the corresponding request.
# The actual media type returned will be specfied in the Content-Type header field
# of the of the response.
# The default of the Accept header is json, i.e. there is not needed to
# set the value, but supporting it serves extensibility.
produces:
  - application/json

######################################################
# The "API Collection" resource APIs
######################################################
paths:
  /redeploy-api:

    #-----------------------------------------------------
    # Re Deploy the API in the Gateway
    #-----------------------------------------------------
    post:
      x-code-samples:
        - lang: Curl
          source: '"curl -k -X POST "https://127.0.0.1:9443/api/am/gateway/v1/redeploy-api?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\"
             -H "Authorization: Basic YWRtaW46YWRtaW4="'
      summary: Re Deploy the API in the gateway
      description: |
        This operation is used to re deploy an API in the gateway. If the Tenant domain is not provided carbon.super
        will be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - ReDeploy API
      responses:
        200:
          description: |
            OK.
            API successfully deployed in the Gateway.
          schema:
            $ref: '#/definitions/DeployResponse'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'

  /undeploy-api:

    #-----------------------------------------------------
    # Undeploy the API from the Gateway
    #-----------------------------------------------------
    post:
      x-code-samples:
        - lang: Curl
          source: '"curl -k -X POST "https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\"
             -H "Authorization: Basic YWRtaW46YWRtaW4="'
      summary: Uneploy the API from the gateway
      description: |
        This operation is used to undeploy an API from the gateway. If the Tenant domain is not provided carbon.super will
        be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - Undeploy API
      responses:
        200:
          description: |
            OK.
            API successfully undeployed from the Gateway.
          schema:
            $ref: '#/definitions/DeployResponse'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'

  /api-artifact:

    #-----------------------------------------------------
    # Get API synapse definition artifacts
    #-----------------------------------------------------
    get:
      x-code-samples:
        - lang: Curl
          source: '"curl -k -X GET "https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\"
             -H "Authorization: Basic YWRtaW46YWRtaW4="'
      summary: Get API synapse definition artifact from the storage
      description: |
        This operation is used to get the API synapse definition from the storage. If the Tenant domain
        is not provided carbon.super will be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - Get API Artifacts
      responses:
        200:
          description: |
            OK.
            API artifact successfully retrieved from the storage.
          schema:
            $ref: '#/definitions/API'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'

  /local-entry:

    #-----------------------------------------------------
    # Get local entries for the API
    #-----------------------------------------------------
    get:
      x-code-samples:
        - lang: Curl
          source: '"curl -k -X GET "https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\"
             -H "Authorization: Basic YWRtaW46YWRtaW4="'
      summary: Get Local Entry from the storage
      description: |
        This operation is used to get local entry from the storage.If the Tenant domain is not provided carbon.super
        will be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - Get API Artifacts
      responses:
        200:
          description: |
            OK.
            Local entry for the API successfully retrieved from the storage.
          schema:
            $ref: '#/definitions/LocalEntry'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'

  /sequence:
    #-----------------------------------------------------
    # Get sequences of the API
    #-----------------------------------------------------
    get:
      x-code-samples:
        - lang: Curl
          source: '"curl -k -X POST "https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\"
             -H "Authorization: Basic YWRtaW46YWRtaW4="'
      summary: Get sequences from the storage
      description: |
        This operation is used to get the API sequence from the storage. If the Tenant domain is not provided carbon.super
        will be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - Get API Artifacts
      responses:
        200:
          description: |
            OK.
            Sequences for the API successfully retrieved from the storage.
          schema:
            $ref: '#/definitions/Sequences'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'

  /end-points:

    #-----------------------------------------------------
    # Get end-points of the API
    #-----------------------------------------------------
    get:
      x-code-samples:
        - lang: Curl
          source: '"curl -k -X POST "https://127.0.0.1:9443/api/am/gateway/v1/end-points?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\"
             -H "Authorization: Basic YWRtaW46YWRtaW4="'
      summary: Get end-points from the storage for the API
      description: |
        This operation is used to get the end-points from the storage. If the Tenant domain is not provided
        carbon.super will be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - Get API Artifacts
      responses:
        200:
          description: |
            OK.
            End-points successfully retrieved from the storage for the API.
          schema:
            $ref: '#/definitions/Endpoints'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'

######################################################
# The response schemas used by the API resources
######################################################
responses:

  # Bad Request Error Response Schema
  BadRequest:
    description: Bad Request. Invalid request or validation error.
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: 400
        message: "Bad Request"
        description: "Invalid request or validation error"
        moreInfo: ""
        error: []

  # Not Found Error Response Schema
  NotFound:
    description: Not Found. The specified resource does not exist.
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: 404
        message: "Not Found"
        description: "The specified resource does not exist"
        moreInfo: ""
        error: []

######################################################
# The resources used by some of the APIs above within the message body
######################################################
definitions:
  #-----------------------------------------------------
  # The deploy response
  #-----------------------------------------------------
  DeployResponse:
    title: Deploy API Response
    required:
      - deployStatus
    properties:
      deployStatus:
        description: |
          This attribute declares whether deployment task is successful or failed.
        type: string
        enum:
          - DEPLOYED
          - UNDEPLOYED
          - ERROR
        example: DEPLOYED
      message:
        description: |
          Attributes that returned after the API deployment
        type: string

  #-----------------------------------------------------
  # The API synapse definition response
  #-----------------------------------------------------
  API:
    title: API Definition Response
    properties:
      api:
        description: |
          The synapse definition of the API
        type: string

  #-----------------------------------------------------
  # The Endpoint response
  #-----------------------------------------------------
  Endpoints:
    title: Endpoints Response
    properties:
      deployedEndpoints:
        description: |
          The end points which has been deployed in the gateway
        type: array
        items:
          type: string
      notdeployedEndpoints:
        description: |
          The end points which has not been deployed in the gateway
        type: array
        items:
          type: string

  #-----------------------------------------------------
  # The Sequence response
  #-----------------------------------------------------
  Sequences:
    title: Sequences Response
    properties:
      deployedSequences:
        description: |
          The sequences which has been deployed in the gateway
        type: array
        items:
          type: string
          example: "<sequence xmlns=\"http://ws.apache.org/ns/synapse\" name=\"PizzaShackAPI--v1.0.0_APIproductionEndpoint\"><http uri-template=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"><timeout><responseAction>fault</responseAction></timeout></http><property name=\"ENDPOINT_ADDRESS\" value=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"/></sequnce>"
      notdeployedSequences:
        description: |
          The sequences which has not been deployed in the gateway
        type: array
        items:
          type: string
          example: "<sequence xmlns=\"http://ws.apache.org/ns/synapse\" name=\"PizzaShackAPI--v1.0.0_APIproductionEndpoint\"><http uri-template=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"><timeout><responseAction>fault</responseAction></timeout></http><property name=\"ENDPOINT_ADDRESS\" value=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"/></sequnce>"

  #-----------------------------------------------------
  # The Local Entry response
  #-----------------------------------------------------
  LocalEntry:
    title: LocalEntry Response
    properties:
      deployedLocalEntries:
        description: |
          The local entries which has been deployed in the gateway
        type: array
        items:
          type : string
          example : "<localEntry xmlns=\"http://ws.apache.org/ns/synapse\" key=\"ga-config-key\" type=\"1\"><GoogleAnalyticsTracking xmlns=\"\">\n\t<!--Enable/Disable Google Analytics Tracking -->\n\t<Enabled>false</Enabled>\n\n\t<!-- Google Analytics Tracking ID -->\n\t<TrackingID>UA-XXXXXXXX-X</TrackingID>\n\n</GoogleAnalyticsTracking></localEntry>"
      notdeployedLocalEntries:
        description: |
          The local entries which has not been deployed in the gateway
        type: array
        items:
          type : string
          example: "<localEntry xmlns=\"http://ws.apache.org/ns/synapse\" key=\"ga-config-key\" type=\"1\"><GoogleAnalyticsTracking xmlns=\"\">\n\t<!--Enable/Disable Google Analytics Tracking -->\n\t<Enabled>false</Enabled>\n\n\t<!-- Google Analytics Tracking ID -->\n\t<TrackingID>UA-XXXXXXXX-X</TrackingID>\n\n</GoogleAnalyticsTracking></localEntry>"

  #-----------------------------------------------------
  # The Error response
  #-----------------------------------------------------
  Error:
    title: Error object returned with 4XX HTTP status
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int64
        description: Error code
      message:
        type: string
        description: Error message.
      description:
        type: string
        description: |
          A detail description about the error message.
      moreInfo:
        type: string
        description: |
          Preferably an url with more details about the error.
      error:
        type: array
        description: |
          If there are more than one error list them out.
          For example, list out validation errors by each field.
        items:
          $ref: '#/definitions/ErrorListItem'

  #-----------------------------------------------------
  # The Error List Item response
  #-----------------------------------------------------
  ErrorListItem:
    title: Description of individual errors that may have occurred during a request.
    required:
      - code
      - message
    properties:
      code:
        type: string
        description: Error code
      message:
        type: string
        description: |
          Description about individual errors occurred
#-----------------------------------------------------
# END-OF-FILE
#-----------------------------------------------------